Locking strategies :
https://docs.jboss.org/hibernate/orm/4.0/devguide/en-US/html/ch05.html
http://docs.oracle.com/javaee/6/tutorial/doc/gkjiu.html

Optimistic locking -	assumes that multiple transactions can complete without affecting each other, and that therefore transactions can proceed without locking the data resources that they affect. Before committing, each transaction verifies that no other transaction has modified its data. If the check reveals conflicting modifications, the committing transaction rolls back. This approach guarantees some isolation, but scales well and works particularly well in Read-Often Write-Sometimes situations.
Pessimistic locking -	assumes that concurrent transactions will conflict with each other, and requires resources to be locked after they are read and only unlocked after the application has finished using the data.


Table 37-1 Lock Modes for Concurrent Entity Access
OPTIMISTIC -	Obtain an optimistic read lock for all entities with version attributes.

OPTIMISTIC_FORCE_INCREMENT -	Obtain an optimistic read lock for all entities with version attributes, and increment the version attribute value.

PESSIMISTIC_READ -	Immediately obtain a long-term read lock on the data to prevent the data from being modified or deleted. Other transactions may read the data while the lock is maintained, but may not modify or delete the data.
The persistence provider is permitted to obtain a database write lock when a read lock was requested, but not vice versa.

PESSIMISTIC_WRITE -	Immediately obtain a long-term write lock on the data to prevent the data from being read, modified, or deleted.

PESSIMISTIC_FORCE_INCREMENT -	Immediately obtain a long-term lock on the data to prevent the data from being modified or deleted, and increment the version attribute of versioned entities.

READ -	A synonym for OPTIMISTIC. Use of LockModeType.OPTIMISTIC is to be preferred for new applications.

WRITE -	A synonym for OPTIMISTIC_FORCE_INCREMENT. Use of LockModeType.OPTIMISTIC_FORCE_INCREMENT is to be preferred for new applications.

NONE -	No additional locking will occur on the data in the database.


Setting the Lock Mode
The lock mode may be specified by one of the following techniques:

Calling the EntityManager.lock and passing in one of the lock modes:
EntityManager em = ...;
Person person = ...;
em.lock(person, LockModeType.OPTIMISTIC);

Calling one of the EntityManager.find methods that takes the lock mode as a parameter:
EntityManager em = ...;
String personPK = ...;
Person person = em.find(Person.class, personPK, 
        LockModeType.PESSIMISTIC_WRITE);
        
Calling one of the EntityManager.refresh methods that takes the lock mode as a parameter:
EntityManager em = ...;
String personPK = ...;
Person person = em.find(Person.class, personPK);
...
em.refresh(person, LockModeType.OPTIMISTIC_FORCE_INCREMENT);

Calling the Query.setLockMode or TypedQuery.setLockMode method, passing the lock mode as the parameter:
Query q = em.createQuery(...);
q.setLockMode(LockModeType.PESSIMISTIC_FORCE_INCREMENT);
Adding a lockMode element to the @NamedQuery annotation:

@NamedQuery(name="lockPersonQuery",
  query="SELECT p FROM Person p WHERE p.name LIKE :name",
  lockMode=PESSIMISTIC_READ)


Versioned entities as well as entities that do not have version attributes can be locked pessimistically.
To lock entities pessimistically, set the lock mode to PESSIMISTIC_READ, PESSIMISTIC_WRITE, or PESSIMISTIC_FORCE_INCREMENT.
If a pessimistic lock cannot be obtained on the database rows, and the failure to lock the data results in a transaction rollback, a PessimisticLockException is thrown. 
If a pessimistic lock cannot be obtained, but the locking failure doesn’t result in a transaction rollback, a LockTimeoutException is thrown.
Pessimistically locking a version entity with PESSIMISTIC_FORCE_INCREMENT results in the version attribute being incremented even if the entity data is unmodified. When pessimistically locking a versioned entity, the persistence provider will perform the version checks that occur during optimistic locking, and if the version check fails, an OptimisticLockException will be thrown. Attempting to lock a non-versioned entity with PESSIMISTIC_FORCE_INCREMENT is not portable and may result in a PersistenceException if the persistence provider doesn’t support optimistic locks for non-versioned entities. Locking a versioned entity with PESSIMISTIC_WRITE results in the version attribute being incremented if the transaction was successfully committed.
Pessimistic Locking Timeouts -	The length of time in milliseconds the persistence provider should wait to obtain a lock on the database tables may be specified using the javax.persistence.lock.timeout property. If the time it takes to obtain a lock exceeds the value of this property, a LockTimeoutException will be thrown, but the current transaction will not be marked for rollback. If this property is set to 0, the persistence provider should throw a LockTimeoutException if it cannot immediately obtain a lock.


